name: First workflow

on:
  pull_request:
  workflow_dispatch:
  push:

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Print
        run: echo "Hello"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Build App
        run: mvn clean install

      - name: Run JaCoCo and Generate Report
        run: mvn test jacoco:report

      - name: Verify Coverage
        run: |
          MISSED=$(grep -oP '(?<=missed=")[0-9]+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
          COVERED=$(grep -oP '(?<=covered=")[0-9]+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
          echo "Missed Instructions: $MISSED"
          echo "Covered Instructions: $COVERED"
          TOTAL=$(echo "$MISSED + $COVERED" | bc)
          COVERAGE=$(echo "scale=2; ($COVERED / $TOTAL) * 100" | bc)
          echo "Total Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "Coverage is below threshold: $COVERAGE%"
            exit 1
          fi

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn sonar:sonar \
          -Dsonar.organization=va-spec \
          -Dsonar.projectKey=DemoActions \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.java.binaries=target

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Checking SonarQube Quality Gate status..."
          STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=DemoActions" | jq -r .projectStatus.status)
          echo "SonarQube Quality Gate status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "SonarQube Quality Gate failed."
            exit 1
          fi

  deploy:
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - name: Deploying
        run: echo "Deploying"